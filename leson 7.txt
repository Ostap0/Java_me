import java.util.*;

interface Animals{
    void speak();
}

interface Predator{
    void eat();
}


public abstract class Main implements Animals,Predator{


    public static void main(String[] args) {
        Dog dog = new Dog();
        Wolf.II aa = new Wolf("Чорний", "qaz").new II("aaa");
        Wolf wolf = new Wolf("black", "wolf");
        Lion lion = new Lion();

        System.out.println("hi, I'm " + dog.name + " and I have " + dog.color + " color");
        dog.speak();
        System.out.println("hi, I'm " + wolf.getName() + " and I have " + wolf.getColor() + " color");
        wolf.speak();
        wolf.getColor();

        System.out.println("hi, I'm " + lion.name + " and I have " + lion.color + " color");
        lion.speak();
        lion.eat();
        System.out.println("");


        ArrayList<String> name = new ArrayList<String>();

        name.add("Wolf");
        name.add("Dog");
        name.add("Lion");
        name.add("Cat");

        Collections.sort(name);
        System.out.println(" Alphabet Sorting:");
        for (String counter : name) {
            System.out.println(counter);
        }

        Cat cat = new Cat();
        Cat cat2 = new Cat();
        Cat cat3 = new Cat();
        Cat cat22 = new Cat();

        Cat cat1 = foo(cat);

        cat.Setname("CAT");
        cat1.setName("small cat");
        cat2.setName("small cat 2");
        System.out.println("");

        System.out.println(cat.getName());
        System.out.println(cat1.getName());
        System.out.println(cat2.getName());

        System.out.println("-----------");
        aa.start();


        System.out.println("" + Cat.getCount());

        Def def = new Def();
        System.out.println(def.definition());
    }


    public static Cat foo(Cat cat1){
        Cat smallcat = null;

        try {
            smallcat = (Cat) cat1.clone();
        }
        catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }

        return smallcat;
    }
}




class Dog extends Main  {

    public String name;
    {
        this.name = "dog Соня";
    }
    public String color;
    {
        this.color = "Білий";
    }



    @Override
    public void speak(){
        System.out.println("gaw");
    }

    @Override
    public  void eat() {
        System.out.println("Im eating");
    }


}


class Lion extends Main{
    public String color;

    {
        this.color ="Жовтий";
    }

    public String name;
    {
        this.name = "Лев";
    }


    @Override
    public  void speak() {
        System.out.println(".....");
    }

    @Override
    public final void eat() {
        System.out.println("I'm eating...");
    }


}



class Cat implements Cloneable {
    private String name;

    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name = name;
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    public void Setname(String cat) {

    }



    private static int count = 0;

    public Cat(){
        new Counter().setCount();
    }

    public static int getCount() {
        return count;

    }

    private static class Counter {

        private void setCount() {
            count = count + 1;
        }

    }

}

enum Name {Igor,Ostap,Kate}

class Question{
    Name ask(){
        Random random = new Random();
        int a = (int) (100* random.nextDouble());
        if (a < 30) return Name.Igor;
        else if (a < 60) return Name.Ostap;
         else return Name.Kate;
    }
}

class Def {
    String definition(){
        String s = "";
        Question question = new Question();
        Name a = question.ask();
        switch (a){
            case Igor: s = "Ігор";
            break;

            case Ostap: s =  "Остап";
            break;

            case Kate: s =  "КАТЯ";
            break;
        }
            return s;
    }
}









public class Wolf extends Main {


    private String color;
    private String name;

    public Wolf(String color, String name) {
        this.color = color;
        this.name = name;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public void speak() {
        System.out.println(" qwef");
    }

    @Override
    public void eat() {
        System.out.println("im eating..");
    }

    public class II {
        private String forest;

        public II(String forest) {
            this.forest = forest;
        }


        public void start() {

            System.out.println("Він живе в лісі і має " + color + " колір " + " і Ім'я " + name);
            System.out.println("-----------");
        }


    }


}
